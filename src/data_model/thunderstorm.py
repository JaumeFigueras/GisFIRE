#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# General imports
import datetime

from sqlalchemy import Integer
from sqlalchemy import Float
from sqlalchemy import ForeignKey
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy.ext.hybrid import hybrid_property
from geoalchemy2 import shape
from geoalchemy2 import Geometry
from geoalchemy2.elements import WKBElement

# Local project imports
from src.data_model import Base
from src.data_model.mixins.location import LocationMixIn
from src.data_model.mixins.date_time import DateTimeMixIn
from src.data_model.mixins.time_stamp import TimeStampMixIn

# Typing hints imports
from sqlalchemy.orm import Mapped
from typing import List
from typing import Union
from shapely.geometry import Point
from shapely.geometry import Polygon


class ThunderstormLightningAssociation(Base):
    """
    Association table linking thunderstorms and lightning events.

    This class models the many-to-many relationship between thunderstorms and
    lightning strikes. Each record represents a single association between a
    thunderstorm and a lightning event, allowing for detailed tracking and analysis
    of how lightning activity corresponds to storm occurrences.

    Attributes
    ----------
    thunderstorm_id : int
        Foreign key referencing the associated thunderstorm.
    lightning_id : int
        Foreign key referencing the associated lightning event.
    lightning : :class:`~src.data_model.lightning.Lightning`
        The lightning event linked to the thunderstorm.
    thunderstorm : :class:`~src.data_model.thunderstorm.Thunderstorm`
        The thunderstorm linked to the lightning event.

    Notes
    -----
    This table uses a composite primary key (`thunderstorm_id`, `lightning_id`)
    to uniquely identify each association. It enables efficient querying of
    lightning events per thunderstorm and vice versa.

    See Also
    --------
    :class:`~src.data_model.thunderstorm.Thunderstorm`
        Model representing individual thunderstorm records.
    :class:`~src.data_model.lightning.Lightning`
        Model representing individual lightning strike records.
    """
    __tablename__ = "thunderstorm_lightning_association"
    thunderstorm_id: Mapped[int] = mapped_column(ForeignKey("thunderstorm.id"), primary_key=True)
    lightning_id: Mapped[int] = mapped_column(ForeignKey("lightning.id"), primary_key=True)
    lightning: Mapped["Lightning"] = relationship(back_populates="thunderstorm_associations")
    thunderstorm: Mapped["Thunderstorm"] = relationship(back_populates="lightning_associations")

class Thunderstorm(Base, LocationMixIn, DateTimeMixIn, TimeStampMixIn):
    """
    Represents a thunderstorm event with spatial, temporal, and physical characteristics.

    This class models a thunderstorm as a spatiotemporal phenomenon, capturing its
    location, duration, movement, and intensity. It integrates geographic metadata
    through `LocationMixIn`, temporal metadata via `DateTimeMixIn`, and timestamping
    through `TimeStampMixIn`. The class also supports relationships to lightning events
    and experimental contexts.

    Attributes
    ----------
    id : int
        Unique identifier for the thunderstorm record.
    lightnings_per_minute : float
        Frequency of lightning strikes per minute during the storm.
    travelled_distance : float
        Distance traveled by the storm in meters.
    cardinal_direction : float
        Direction of storm movement in degrees (0 degrees is North, 90 is East, 180 is South, 270 is West).
    speed : float
        Speed of storm movement in m/s.
    _convex_hull_4326 : WKBElement
        Geometry representing the convex hull of the storm in EPSG:4326.
    x_4326 : float
        Longitude coordinate of the storm location in EPSG:4326 (generated by metaclass).
    y_4326 : float
        Latitude coordinate of the storm location in EPSG:4326 (generated by metaclass).
    geometry_4326 : Union[str, Point]
        Geometry representation of the storm location in EPSG:4326 (generated by metaclass).
    date_time_start : datetime.datetime
        Start time of the thunderstorm event (generated by metaclass).
    tzinfo_date_time_start : str
        Timezone information for the start time (generated by metaclass).
    date_time_end : datetime.datetime
        End time of the thunderstorm event (generated by metaclass).
    tzinfo_date_time_end : str
        Timezone information for the end time (generated by metaclass).
    thunderstorm_experiment_id : int
        Foreign key linking to the associated thunderstorm experiment.
    thunderstorm_experiment : ThunderstormExperiment
        Relationship to the parent experiment that includes this thunderstorm.
    lightnings : List[Lightning]
        Many-to-many relationship to associated lightning events.
    lightnings_associations : List[ThunderstormLightningAssociation]
        Association objects linking this thunderstorm to lightning events.
    ts : datetime.datetime
        Insertion and update time in the database (generated by metaclass).

    Notes
    -----
    - The location and date attributes are dynamically generated by metaclasses.
    - Geometry fields use GeoAlchemy2 and are stored in WKB format.
    - Relationships to lightning events support both direct and association-based access.
    """
    # Metaclass location attributes
    __location__ = [
        {'epsg': 4326, 'validation': 'geographic', 'conversion': False}
    ]
    # Type hint for generated attributes by the metaclass
    x_4326: float
    y_4326: float
    geometry_4326: Union[str, Point]
    # Metaclass date attributes
    __date__ = [
        {'name': 'date_time_start', 'nullable': False},
        {'name': 'date_time_end', 'nullable': False},
    ]
    # Type hint for generated date and tzinfo attributes by the metaclass
    date_time_start: datetime.datetime
    tzinfo_date_time_start: str
    date_time_end: datetime.datetime
    tzinfo_date_time_end: str
    # Class data
    __tablename__ = "thunderstorm"
    id: Mapped[int] = mapped_column('id', Integer, primary_key=True, autoincrement=True)
    lightnings_per_minute: Mapped[float] = mapped_column('lightnings_per_minute', Float, primary_key=True)
    travelled_distance: Mapped[float] = mapped_column('travelled_distance', Float, primary_key=True)
    cardinal_direction: Mapped[float] = mapped_column('cardinal_direction', Float, primary_key=True)
    speed: Mapped[float] = mapped_column('speed', Float, primary_key=True)
    _convex_hull_4326: Mapped[WKBElement] = mapped_column('convex_hull_4326', Geometry(geometry_type='POLYGON', srid=int(4326)), nullable=True)
    # Relations
    thunderstorm_experiment_id: Mapped[int] = mapped_column('thunderstorm_experiment_id', ForeignKey('thunderstorm_experiment.id'), nullable=False)
    thunderstorm_experiment: Mapped["ThunderstormExperiment"] = relationship(back_populates="thunderstorms")
    # many-to-many relationship to Child, bypassing the `Association` class
    lightnings: Mapped[List["Lightning"]] = relationship(secondary="thunderstorm_lightning_association", back_populates="thunderstorms")
    # association between Parent -> Association -> Child
    lightnings_associations: Mapped[List["ThunderstormLightningAssociation"]] = relationship(back_populates="thunderstorm")
    # Inheritance
    type: Mapped[str]
    __mapper_args__ = {
        "polymorphic_identity": "thunderstorm",
        "polymorphic_on": "type",
    }

    def __init__(self) -> None:
        """
        Initializes a Thunderstorm instance.

        This constructor delegates initialization to the base classes via `super()`.
        It does not perform any additional setup beyond inherited behavior.

        Notes
        -----
        The actual initialization must be done attribute by attribute after object creation.
        """
        super().__init__()

    @hybrid_property
    def number_of_lightnings(self) -> int:
        """
        Returns the number of lightning events associated with this thunderstorm.

        This property calculates the count of lightning strikes linked to the
        thunderstorm instance via its `lightnings` relationship. It is evaluated
        in Python and reflects the number of related records currently loaded
        in memory.

        Returns
        -------
        int
            The number of lightning events associated with this thunderstorm.

        Notes
        -----
        If the `lightnings` relationship is not already populated (as it is eagerly
        loaded), accessing this property will trigger additional database queries.
        """
        return len(self.lightnings)

    @property
    def convex_hull_4326(self) -> Polygon:
        """
        Converts the stored geometry to a Shapely Polygon object.

        Returns
        -------
        shapely.geometry.Polygon
            A Shapely representation of the region's geometry.
        """
        return shape.to_shape(self._convex_hull_4326)
